/*
Used Memory:
R.00 is the variable selection indirection register
R.01 is the number of equations
R.02 is the matrix memory base address
R.03 is the equation selection indirection register
R.04 is the convergence test register
R.05 is a junk register as a lazy way to disable indirection for the functions

Registers R.06 and up contain the Jacobian and Function Matrixes (Size: R.01^2+R.01)

R01-R10 are the variables and initial guesses

Labels:
LBL '1'-'10' are the equations which use R01-R10 as the variables
*/

LBL'MLS'
		CL[alpha]
		"# OF EQ?"
		PROMPT
		FILL
		x[^2]
		+
		6		// 6 local registers in addition to matrixes
		+
		LocR[->]X
		x[<->] Y
		STO .01
		# 118		// R.06 to start matrixes
		STO .02
iteration::	STO .04
		1
		STO .00
		STO .03
jacobian::	RCL[->].00	// Calculate Jacobian Matrix and store -> R.02
		f'(x)[->].03
		STO[->].02
		RCL L
		STO[->].00
		
		INC .00
		INC .02
		
		RCL .00
		x<=? .01
		JMP jacobian	// Rows
		1
		STO .00
		INC .03
		RCL .03
		x<=? .01
		JMP jacobian	// Columns

		# 117		// R.05 junk register
		STO .00		// Effectively disable variable indirection
		1
		STO .03
function::	XEQ[->].03	// Create function matrix and store -> R.02
		STO[->].02
		INC .02
		INC .03
		RCL .03
		x<=? .01
		JMP function

		# 118		// R.06 to start matrixes
		STO .02		// Restore .02 to initial value
	
		RCL .01
		SDR 2
		RCL+ .02	// Jacobian Matrix Descriptor

		RCL .01
		x[^2]
		RCL+ .02
		RCL .01
		SDR 2
		+
		1
		SDR 4
		+		// Function Matrix Descriptor
		ENTER
		LINEQS

		RCL .01
		SDR 2
		1
		SDR 4
		+
		1
		+		// Variables Matrix Descriptor
		XEQ'M-'

		/*20
		INC 10
		RCL 10
		x<=? Y
		GTO'MLS'*/

		M-ALL
		0
sum::		RCL[->]Y	// Sum the squares to verify convergence
		x[^2]
		+
		ISG Y
		JMP sum
		x[!=]? .04
		JMP iteration
		RCLS 01		// Load stack with answers (the quick and dirty way)
		RTN
LBL 01
		STO[->].00
		XEQ'1'
		RTN
LBL 02
		STO[->].00
		XEQ'2'
		RTN
LBL 03
		STO[->].00
		XEQ'3'
		RTN
LBL 04
		STO[->].00
		XEQ'4'
		RTN
LBL 05
		STO[->].00
		XEQ'5'
		RTN
LBL 06
		STO[->].00
		XEQ'6'
		RTN
LBL 07
		STO[->].00
		XEQ'7'
		RTN
LBL 08
		STO[->].00
		XEQ'8'
		RTN
LBL 09
		STO[->].00
		XEQ'9'
		RTN
LBL 10
		STO[->].00
		XEQ'10'
		END
